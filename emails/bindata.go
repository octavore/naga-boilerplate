// Code generated by go-bindata.
// sources:
// build/email.html
// DO NOT EDIT!

package emails

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _buildEmailHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\xdb\x8e\xdb\xb6\x16\x7d\xf7\x57\xec\x51\x10\xe0\x9c\x83\xd0\x92\x27\x17\x64\x64\x49\x48\xce\x9c\xc9\xc1\x00\xbd\x0c\xd2\x04\x28\x10\xcc\x03\x4d\x6d\x5b\xcc\x50\x24\x43\xd2\xb6\x5c\x37\x40\x3f\xa2\x1f\xd0\x6f\xe9\xa7\xf4\x4b\x0a\xea\x62\xcb\x97\x71\x13\xa4\x79\xa8\x1f\x46\xc3\xdb\xde\x8b\x6b\xaf\xb5\x2d\x27\x67\xb9\x62\x6e\xa5\x11\x0a\x57\x8a\x6c\x90\xf8\x07\x54\xa5\x90\x36\x0d\x0a\xe7\x74\x1c\x86\xcb\xe5\x72\xb8\x7c\x3c\x54\x66\x16\x8e\x2e\x2e\x2e\xc2\xca\xef\x09\x9a\x4d\xf1\x22\x0d\xe6\x46\xc6\x96\x15\x58\x52\x4b\x4a\xce\x8c\xb2\x6a\xea\x08\x53\x65\xbc\xd8\xee\x53\xa7\xf6\xa9\xe9\x94\x33\x6c\x1f\x81\x47\x81\x34\xcf\x06\x00\x89\xe3\x4e\x60\x96\x84\xcd\xd3\xcf\x9c\x11\xf2\x8e\x4f\xe1\xac\xb4\xea\x36\xf3\x23\x20\xa4\x5e\x28\xd1\x51\xf0\x90\x09\x7e\x98\xf3\x45\x1a\xfc\x48\xde\xbe\x24\x97\xaa\xd4\xd4\xf1\x89\xc0\x00\x98\x92\x0e\xa5\x4b\x83\xeb\xab\x14\xf3\x99\xcf\xd4\x04\x4c\xce\xde\xa1\xcc\xf9\xf4\xd6\x87\x3a\x0c\x74\xd9\x9c\x23\x6f\x56\xba\x1f\xc5\x61\xe5\x42\xcf\xc5\x18\x58\x41\x8d\x45\x97\xbe\x7d\xf3\x8a\x3c\x0f\xba\x18\x92\x96\x98\x06\x0b\x8e\x4b\xad\x8c\xeb\x9d\x5c\xf2\xdc\x15\x69\x8e\x0b\xce\x90\xd4\x83\x47\xc0\x25\x77\x9c\x0a\x62\x19\x15\x98\x8e\x86\x91\x0f\x63\xdd\x4a\x20\xf8\xfa\xb4\xe9\x98\xb5\x35\xea\x07\x6a\xee\x84\x52\x77\x40\x61\x0d\x9a\xe6\x39\x97\xb3\x18\xa2\x31\x7c\x1c\x00\x0c\x5f\x23\xcd\xbf\xb5\xb3\xff\xaa\x7c\x05\x6b\xa8\x13\xc4\x30\x8a\xa2\x87\xed\xfa\x55\xe5\xd0\x48\x2a\x2e\x05\xb5\xf6\x13\x76\xfc\x07\xd6\x20\xb8\x44\x52\x20\x9f\x15\x2e\xde\x6e\x9c\x34\x29\x4a\x6a\x66\x5c\xd6\x00\xfa\x60\xc8\x12\x27\x77\xdc\x11\x0f\x9d\x58\xfe\x13\x12\x9a\xbf\x9f\x5b\xd7\xa5\x22\xa5\xbd\x77\xcd\x47\x77\x74\x22\xf0\x11\xb8\x1c\xd6\x30\x51\x26\x47\x43\x98\x12\x82\x6a\x8b\x71\xf7\xcf\x18\x4a\xab\x48\xbd\x93\x08\xab\x29\xc3\x18\x22\xed\xfa\xd3\xa6\x3f\xed\xe3\xf2\x72\xb6\x89\x58\x03\x6d\xef\x05\x74\xee\xd4\x78\xe7\xaa\x2d\x1a\x4f\x37\x97\x18\x83\x54\x12\xc7\x50\x83\xce\x91\x29\x43\x1d\x57\xb2\x9b\xf6\xf7\xe1\xd2\xa1\xd1\x4a\xd4\x0b\xa4\x54\x39\xc6\x30\xe1\x6c\x3e\xe1\xac\x49\xae\x61\x0d\x39\xb7\x5a\xd0\x55\x0c\x13\xa1\xd8\xdd\x78\xc3\xdf\xe8\xb1\xae\x9a\x2a\x26\x61\x5d\xfb\x6c\x70\x28\xf8\x53\xba\x78\x51\x62\xce\x29\x28\x29\x56\x60\x99\x41\x94\x40\x65\x0e\xff\x2a\x69\xd5\x08\x2d\x7e\xf2\x3c\xd2\xd5\xbf\x61\x3d\x00\x00\x78\xe1\x11\x77\x02\xdd\x08\xe1\xf1\x79\xa4\xab\x06\x2c\xc0\x8b\x53\xcb\x7b\x38\x77\x7d\xd4\x02\xaf\x71\x0f\x92\xca\xb7\x17\x80\x44\xc5\xdf\xd7\x36\xff\x9f\x62\xf3\x12\xa5\xfb\x01\x9d\xe3\x72\x66\xb3\x3a\x5b\xa2\xe2\x97\x42\xa8\xe5\xcd\x77\xff\x0f\x37\x33\x37\xbc\x42\x61\x6f\xd0\x5c\x4b\x56\x64\x17\xcf\x92\x70\x7f\xce\x07\x0e\xef\x8f\x9c\x84\x75\xf6\xa3\xf0\x84\x43\x0f\x11\x46\xa3\xdb\x53\xc4\x0e\x5b\xc3\x91\x99\x51\x73\x4d\xa6\xbc\x6a\x29\x6c\x38\xf1\x2a\x81\x33\x5e\x7a\xa2\xa8\x74\xe3\x7d\x6e\xfa\x89\x3f\xbf\x78\x5c\x1e\x2b\xde\xb0\x7c\xef\xed\x30\x2f\x25\xd1\x68\xc8\x28\x8a\x36\x25\xf2\x70\x7a\x68\x0e\x6a\x15\x36\x0d\x36\xf1\xf6\xf5\x99\x3d\x7f\x39\x5f\x00\xf3\x76\x4f\x83\x3a\xb0\x74\x94\x4b\x34\x41\xd6\x2b\x24\xfc\x0c\xd7\x57\xb7\x4d\x61\x7c\x77\xf6\xf6\x02\xa3\x04\xa6\x81\x36\x68\x51\xba\x5a\xf6\x41\xeb\xad\x34\x88\x02\x60\x28\x44\xdb\x14\x36\x63\x6f\xc8\x6e\xdc\x34\xc3\xe0\x59\x14\x05\x40\x05\x9f\xc9\x34\x60\xe8\x4d\x14\x40\x0d\xb7\x6d\x97\xf1\xb3\xc8\xcb\x2e\xe8\x92\xfb\xf4\x66\x3b\xf0\xc3\xbc\x3b\xd0\x37\xb0\x3f\x34\x55\xb2\xe9\x31\xf5\xc8\x37\x86\xde\x0e\x62\xe6\x02\x63\xac\x28\x73\x62\xb5\x8d\xdf\xaf\x59\xcd\x4d\x1b\xbb\xb5\x6a\xa4\xab\xa6\x5b\x6c\x9d\xd5\x01\x3c\x41\xcb\x5f\x71\xd1\xe6\xd8\xc5\xbb\x2d\xe9\xf8\x80\xa1\x2d\xcf\x59\xe2\xea\x6a\x7a\x56\x7a\x54\xd4\x9d\xaa\x3e\x14\x37\x67\xc6\x0b\x34\x8e\x33\x2a\xda\x59\xa7\xf4\x38\xe7\x06\x59\xdd\xc8\x84\x33\x7b\x6c\x75\xfd\xdc\x9b\x1e\xda\x0b\x7e\x55\x41\x7c\x4a\x81\x8f\xdc\xe1\xa8\x48\x0e\x8a\xd8\x17\xf8\x8e\x73\x0e\xec\x1d\x9c\xc8\xd5\xb5\x6f\x2e\x6b\x1d\x35\x4d\xfc\x3e\x12\x7d\x4f\x1f\xf7\xca\x20\x70\xea\x76\x6a\xfa\x25\x82\x69\xcd\xe3\x03\x7d\x82\x18\x96\xca\xe4\x64\x69\xa8\x8e\x27\x06\xe9\x1d\xf1\xe3\x7b\xca\x3d\xf2\xe5\x3e\x7f\xda\xd4\x5b\x1f\x0a\x73\xe4\x8d\xb4\x67\x85\xf6\x2b\xda\x29\x1d\x3f\xd1\x15\x58\x25\x78\x0e\x0f\x5e\xbd\xba\xbc\x7a\xfa\x64\xef\xc6\xa1\x3e\xa2\xa2\x13\x3c\xdc\x2b\xfb\xcf\xb7\xd4\x17\x21\xef\x77\xab\x7d\x76\xbb\x86\x33\xde\x69\x3f\xe3\x20\xfb\xfd\xb7\x24\x74\xb9\x7f\x8b\x35\xfe\x8f\xbf\x64\xb6\xa3\xcc\xed\xea\xdf\x51\xaf\x8e\x2c\x2f\xb4\x60\xa7\x77\xb1\xb9\xb1\xca\xc4\xf5\x95\x99\x12\xca\xc4\x0f\xa2\xfa\xd3\x04\x9d\xd2\x92\x8b\x55\x5c\xa0\x58\xa0\x97\xfc\xbe\x88\xfb\xf7\x3a\x3f\x3f\xa2\xea\x20\x4b\x8a\x51\xdf\xb2\xfe\xf3\x1a\x2d\x3a\x58\xa9\xb9\x81\x97\x5a\x83\xa6\xd6\xfa\x7b\x0c\x77\xb6\x25\x61\x31\xca\x92\x30\xe7\x8b\x7f\x04\x1b\xcf\xf7\xd8\x18\x3d\x8d\x1e\x1e\x63\x43\xef\x93\x71\x23\x90\x5a\x04\x26\x38\xbb\x83\x84\x42\x61\x70\x9a\x06\xeb\xf5\xd0\xab\xdd\xdd\xb4\xdc\x7c\xc3\xe5\xdd\xc7\x8f\x41\x56\xa0\xc1\x24\xa4\x19\x38\x05\x66\x4b\xe3\x71\x0a\x01\xae\xa7\x7e\x1d\x72\x9e\x83\x54\x0e\x0c\x7e\x98\xa3\x75\x40\x37\x07\x9a\x20\x8f\x80\xcf\xa4\x32\x08\xae\xe0\x16\xb0\xa4\x5c\xec\x17\x63\x0f\xf7\xe1\x3d\xfe\xf8\xe5\x57\x70\x05\xc2\x1b\xa4\xe5\xc1\xd9\x83\x3a\x86\x6d\x37\xea\xb4\xdf\xac\xdf\xfb\x2d\x72\x60\x96\x63\xdd\xfc\x2b\x47\xf7\x31\x06\x49\xd8\xbc\x20\x25\xf5\xcf\xbc\xec\xcf\x00\x00\x00\xff\xff\xec\xb9\x4c\xec\x2d\x0f\x00\x00")

func buildEmailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_buildEmailHtml,
		"build/email.html",
	)
}

func buildEmailHtml() (*asset, error) {
	bytes, err := buildEmailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "build/email.html", size: 3885, mode: os.FileMode(420), modTime: time.Unix(1511647361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"build/email.html": buildEmailHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"build": &bintree{nil, map[string]*bintree{
		"email.html": &bintree{buildEmailHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

